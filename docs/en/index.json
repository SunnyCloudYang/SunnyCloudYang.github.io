[{"content":"Well, as you can see, it\u0026rsquo;s my personal blog.\nIt\u0026rsquo;s still at the demo stage, so there aren\u0026rsquo;t so many interesting things yet, but I\u0026rsquo;ll find and add them here gradually.\nWish you have fun here!\n","permalink":"https://sunnycloudyang.github.io/en/posts/post/","summary":"Happy to see you here.","title":"Some Explanationsᵀᴼᴾ"},{"content":"Reason When working on the summer training assignment, I considered that some classmates might find it inconvenient to deploy on GitHub Pages, so I also provided an alternative method using Vercel. However, I hadn\u0026rsquo;t personally deployed a project on Vercel before, so I took this opportunity to give it a try. I soon discovered that Vercel not only supports the deployment of front-end static pages but also allows the addition of server-side functions or database backends. So, while I was using GPT to help write front-end code, I also explored how to deploy a Flask backend on Vercel. Incidentally, I had previously created a simple Chinese Lorem Ipsum Generator for filling text areas when writing an Android demo for my internship, so I decided to use that project as a test case.\nPreparations First, you\u0026rsquo;ll need a front-end page (which can be pure HTML or a framework like React or Vue, or you can leave it all to Flask), a Flask backend, and a Vercel account. For the front-end, I simply let GPT generate it using the Website Generator, iterating until I got a satisfactory result. You can check out the specific conversation here. The front-end doesn’t use any complex frameworks—just Bootstrap and some basic JS—but GPT seemed to not fully grasp the Bootstrap styling library, so it added a lot of extra CSS. Given the site\u0026rsquo;s very simple structure (it’s only one page), I decided to leave it as is.\nI chose Flask for the backend mainly because the text generator was written in Python, and I had previously used Flask to write some RESTful APIs, so it was a perfect fit. Vercel\u0026rsquo;s server-side functions support many runtimes, including Node.js, Go, Python, Ruby, and more, making Python a convenient choice. I simply copied my original script and had GPT rewrite it in a Flask format, made a few tweaks to the request paths, and ended up with a functioning Flask project.\nDeployment First, you need to create a project on Vercel, import the Git repository where your project resides, and wait for Vercel to automatically detect the project type and deploy it. Up to this point, the process is the same as deploying a static site. Next, create a folder named api in the root directory of your project. Vercel will automatically recognize this folder as the Functions folder and set up the appropriate runtime, installing dependencies based on the requirements.txt file in the root directory. Then, create a file named app.py inside the folder—this will be the entry point for your Flask project. Finally, add a rewrites field to the vercel.json file to redirect all requests starting with /api/ to this Flask function, like so:\n1 2 3 4 5 6 7 8 { \u0026#34;rewrites\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;/api/(.*)\u0026#34;, \u0026#34;destination\u0026#34;: \u0026#34;/api/app\u0026#34; } ] } At first, I thought the redirected path was relative to the api folder, so I started the routes in app.py with /. However, the path is actually relative to the project root, so the routes in app.py should start with /api/, just like in a normal Flask project. Additionally, I initially used the route rule, which only responded when accessing /api/app/ and returned the app.py file as plain text! After some troubleshooting, I found that using the rewrites method allows it to work properly. I haven’t deeply researched the difference between these two rules yet, but for now, I’ll leave it as is and look into it later when I have more time.\nAt this point, your Flask project should be running correctly. However, it’s important to note that a Serverless Function restarts each time it’s called, recreates its runtime, and reinstalls dependencies, unless the interval between calls is very short. Therefore, the first request may experience a delay. If your project has strict response time requirements, you might want to consider making a pre-request to \u0026ldquo;warm up\u0026rdquo; the function.\nCold and Hot Boots\rWhen a Serverless Function boots up from scratch, that is known as a cold boot. When it is re-used, we can say the function was warm.\nRe-using a function means the underlying container that hosts it does not get discarded. State, such as temporary files, memory caches, sub-processes, is preserved. This empowers the developer not just to minimize the time spent in the booting process, but to also take advantage of caching data (in memory or filesystem) and memoizing expensive computations.\nIt is important to note that Serverless Functions, even while the underlying container is hot, cannot leave tasks running. If a sub-process is running by the time the response is returned, the entire container is frozen. When a new invocation happens, if the container is re-used, it is unfrozen, which allows sub-processes to continue running. (Vercel Documentation)\nOf course, Vercel also provides Edge Functions for simple tasks. These functions run on CDN edge nodes, allowing them to respond to requests more quickly. The details are as follows:\nEdge Functions\rEdge Functions work in a very similar way to Serverless Functions, but instead of running on a single region, they are copied across the Edge Network and so every time the function is invoked, the region closest to the request will run the function. This results in a much lower latency, and combined with zero cold-start time, allows you to provide personalization at speed.\nEdge Functions run after the cache and so are ideal to be used on specific, dynamic parts of your site once the page is loaded, such a date-picker with availability or a weather component on your site. This response can be cached on the Edge Network making future invocations even faster.\nIt is important to note that Edge Functions are just one solution and not a \u0026ldquo;one size fits all\u0026rdquo; solution. It is possible that the database for your site sits far from the Edge server. That means that even though the edge function can be invoked quickly, it might take twice as long to get the data than if the function was located closer to the data. In this scenario, you may want to use a Serverless Function.\nSee the regional Edge Functions invocation documentation to learn more. (Vercel Documentation)\nResults The final result looks something like this: Chinese Lorem Ipsum\nConclusion Vercel provides a very convenient one-stop deployment service. It not only supports the deployment of static websites but also server-side functions and even databases. This is very handy for small projects—you don’t need to buy a server or configure an environment, and you can focus solely on developing the project itself. Of course, Vercel has some limitations, such as function execution time cannot exceed 10 seconds, no long-running tasks, and no persistent state, so it may not be suitable for larger projects. However, for small projects or ones that are front-end/back-end separated, Vercel is an excellent choice.\nAlright, that’s the end of this half-copilot, half self-written article. It’s starting to feel more like a cheap AI generated blog, which confirms that writing tech blogs isn’t really my thing. I hope this rambling has been somewhat helpful, and that my Lorem Ipsum generator brings you some fun. If you have any questions or suggestions, feel free to leave a comment—I’ll respond as soon as I can, since I’ve got nothing better to do. Goodbye!\n","permalink":"https://sunnycloudyang.github.io/en/posts/vercel-with-flask/","summary":"Long live the Vercel!","title":"Deploy flask api with Vercel"},{"content":" Introduction Welcome to the Ball Universe Brand new interface with brand new experience In short, it\u0026rsquo;s a simple universe with just balls, you can make it chaotic or just in peace and love, that\u0026rsquo;s up to you. (It breaks your browser not mine after all)\nhiahia (╯`□′)╯BOMBS! •••*～●)\nAxiom System Newtonian laws of mechanics Galilean velocity transformation SunnyCloudYang\u0026rsquo;s collision mode Portals -\u0026gt; Click here to enter the old balls universe -\u0026gt; Click here to enter the BRAND NEW balls universe Tutorials (Please read it carefully!) Ⅰ . Primary Balls Simulator By clicking the headline of the page (Welcome to xxx), you can check the version of the current universe; The input box (could have) (now it works) can change the amount of balls rapidly; Clicking \u0026lsquo;Gravity\u0026rsquo; will take gravity into account (and it will enable energy loss as well); clicking \u0026lsquo;Energy loss\u0026rsquo; will do what it\u0026rsquo;s name implies; clicking \u0026lsquo;Universe mode\u0026rsquo; will add gravity between the balls, they will attract each other; In \u0026lsquo;Custom\u0026rsquo; tab you can define the scale/speed of the balls, gravity constant and background color on your own, just feel free to drag the bar; Advanced hidden options: Double click \u0026lsquo;Gravity\u0026rsquo; tab can enable/disable gravity follow mode, which means the ball will always fall towards the ground in your real life. The default value is enable; Double click \u0026lsquo;Energy Loss\u0026rsquo; tab can enable/disable shake mode, you can shake the balls by shaking your device (notice that PC usually doesn\u0026rsquo;t have a acceleration sensor). The default value is disable; You can NOT open \u0026lsquo;shake mode\u0026rsquo; and \u0026lsquo;gravity follow\u0026rsquo; at the same time right now!; Double click \u0026lsquo;Universe mode\u0026rsquo; tab can enable/disable merge mode, the lager ball will eat the smaller one in the collision. The default value is enable; Double click \u0026lsquo;Day mode\u0026rsquo; or \u0026lsquo;Night mode\u0026rsquo; tab can enable/disable tail shadow (to make it prettier or uglier). The default value is disable; Double click Custom tab? That makes no sense. You can drag any ball by clicking it inside, and release it by releasing the left mouse button; If you got stuck by some bugs, just refresh the page, which will restart the universe; The collision now fully abide by the physics laws, don\u0026rsquo;t worry about it; On the PC, there is much more room for the balls, so usually it can contain up to 700 balls; while on the mobile device, you can experience shake mode; (so maybe the best choice is to use a pad) The 🔒 on the top right corner can lock the screen scroll, maybe useful sometimes; Super advanced hidden options: Press F12 to open the console, balls[i] corresponds to each ball. You can assign a valid value to its mess / radius / x / y / vx / vy (eg. balls[0].mess = 114514;) , and there is usually no restrictions about that. But use that carefully in case it breaks your browser Ⅱ. Brand New Balls Universe This mode is a full-screen pure enjoyable version with a brand new UI design, suitable as a wallpaper or for you who have an excellent artistic eye for a more discerning interface! On the upper left corner is the current count of balls, click the number to quickly change the number of balls. Click the Settings icon in the upper right corner to open the Settings menu. Try scroll up or down? All of the customizable variables are almost there. ⚠️ATTENTION: All your settings will only take effects after you SAVE them!\rI believe you HAVE read the initial simulator guide before this section (right?). In this version, all the double-click operations are presented directly as a switch to avoid the embarrassment of confusion. Restrictions Announcement: In this version, some restrictions were added to limit your destructive power to try to present the best performance, mainly refer to the following points： Universe mode and Gravity mode can NOT be enabled simultaneously. Gravity mode forces the inclusion of Energy Loss (to make you feel at home), and when you turn off Gravity mode, Energy Loss automatically reverts to the state it was in before Gravity was turned on. Ground Pointing mode and Shake mode don\u0026rsquo;t work together because the acceleration captured by Ground Pointing includes the acceleration generated when you shake the phone with might and main. If you want to turn on Shake mode, please turn off Ground Pointing first. Control the ball: hold the mouse on the ball to control it and drag the ball across. When there is no ball under your mouse, hold the mouse will create a new ball (and pause all movement temporarily), drag the mouse to control its size (the limit value depends on the maximum/minimum ball radius you set), if you do not want to control its size, just click to create the same size as the last one. Suggestions I suggest turning down the Graviation const under \u0026lsquo;Universe mode\u0026rsquo;. (suggested: 0.200~0.450)； The previous suggestion is really important! Features Bug performance; Sometimes energy is not quite conserved No longer exists; Sometimes momentum is also not quite conserved No longer exists; It may make you relax and angry at the same time. Privacy This program does NOT collect any personal data of users, nor will it upload any data to the cloud. All data processing is carried out locally. And all required device parameters are as follows：\nYour screen\u0026rsquo;s width and height. It\u0026rsquo;s used to determine display size, default number of balls, etc; Your device\u0026rsquo;s acceleration sensor data, it\u0026rsquo;s used to determine the ball\u0026rsquo;s acceleration in Ground Pointing mode and Shake mode. Special Thanks Sincere thanks to Yan (pseudonym) who provided the source code framework! Thanks to Edge as it suffered a lot in debugging; Tanks to my hair as they never leave my head alone; Thanks to Newton for the theoretical support； Thanks to quantum mechanics for it\u0026rsquo;s omnipotent explanation to all the strange behaviors; Thanks to YOU for visiting my program. The End Wow you are still reading! Consider ⭐Star me on Github?\nRaise Your Issues and Report Bugs Here!\n","permalink":"https://sunnycloudyang.github.io/en/gadgets/old/","summary":"Some toys I made before, take a look?","title":"Bounce Balls"},{"content":" This blogpost knows that its biggest role, is just to take up some place to make it seems meaningful.\n\u0026ldquo;Like the zero in mathematics\u0026rdquo;, it thought.\nFinally, the first commit of this holiday fulfilled my \u0026ldquo;grand\u0026rdquo; blueprint \u0026ndash; a blog. To be honest, it\u0026rsquo;s not very hard to build a thing like this. But it still took me nearly two days.\nI remembered that my first \u0026ldquo;blog-like thing\u0026rdquo; was the Bounce Balls. The homepage perhaps can be considered as half a blog, but it was just so boring to watch a bounch of balls bouncing around, so I came up with the idea of a formal blog.\nI thought of pure \u0026ldquo;hand-made\u0026rdquo; website firstly, but the workload will be too heavy for me to finish it in my vacation, so I turned to Hugo (from GitHub\u0026rsquo;s JekyII).After the whole process, I found that the most difficult thing is to take a seriously look at the tutorial. I remember that Bounce Balls\u0026rsquo; homepage also has a long tutorial of my own, with the words \u0026ldquo;Please read this tutorial carefully\u0026rdquo; in big bold letters. It\u0026rsquo;s easy to walk through a tutorial on a small game that doesn\u0026rsquo;t require any technical requirements, but it\u0026rsquo;s not easy to talk about a technical tutorial that is a bit brain-burning and full of incomprehensible aspects.\nAnd here\u0026rsquo;s my first and biggest challenge during my setup. There is such a line in the tutorial:\n1 publishDir = \u0026#39;docs\u0026#39; which I didn\u0026rsquo;t see. So I just couldn\u0026rsquo;t deploy it to GitHub Pages. And I was so anxious that I finally took a look at the tutorial and GitHub build requirements. It was finally successful.\nIt seems that being able to listen carefully and fully understand others is a rare skill.\nOn top of that, the biggest difficulty in building it, and the biggest difficulty right now, is figuring out what all these configurations do, and for the foreseeable future I\u0026rsquo;m going to be blogging and working on the rest of it.\nThere\u0026rsquo;s nothing more I can say. I\u0026rsquo;ll just keep working on it and this post will continue to be updated.\nAnd thank you for reading this. See you later!\n","permalink":"https://sunnycloudyang.github.io/en/posts/post1/","summary":"It\u0026rsquo;s my first post, machine-translated, ugly, and meaningless.","title":"First Post"}]